@using Microsoft.AspNetCore.Http
@using Rocky.BLL.DTOs;
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@model ProductListViewModel
@{
	string? sortBy = ViewBag.sortBy ?? null;
	string? order = ViewBag.order ?? null;
	int? priceFrom = ViewBag.priceFrom;
	int? priceTo = ViewBag.priceTo;
	int[]? categories = null;
	if (ViewBag.categories != null && ViewBag.categories.Length > 0)
	{
		categories = ViewBag.categories;
	}

	ViewData["Title"] = _phrase["General", "HomePageTitle"];
	Layout = "~/Views/Shared/_MainLayout.cshtml";
}
<main id="MainContent" class="content-for-layout">
	<div class="collection mt-100">
		<div class="container">
			<div class="row flex-row-reverse">
				<!-- product area start -->
				<div class="col-lg-9 col-md-12 col-12">
					<div class="filter-sort-wrapper d-flex justify-content-between flex-wrap">
						<div class="collection-title-wrap d-flex align-items-end">
							<h2 class="collection-title heading_24 mb-0">@(ViewBag.CategoryName != null ? ViewBag.CategoryName : "All") products</h2>
							<p class="collection-counter text_16 mb-0 ms-2">(@Model.ProductsCount items)</p>
						</div>
						<div class="filter-sorting">
							<div class="collection-sorting position-relative d-none d-lg-block">
								<div class="sorting-header text_16 d-flex align-items-center justify-content-end">
									<span class="sorting-title me-2">Sort by:</span>
									<span class="active-sorting">@_phrase["Product",Model.OrderBy]</span>
									<span class="sorting-icon">
										<svg class="icon icon-down" xmlns="http://www.w3.org/2000/svg"
											 width="24" height="24" viewBox="0 0 24 24" fill="none"
											 stroke="currentColor" stroke-width="2" stroke-linecap="round"
											 stroke-linejoin="round" class="feather feather-chevron-down">
											<polyline points="6 9 12 15 18 9"></polyline>
										</svg>
									</span>
								</div>
								<ul class="sorting-lists list-unstyled m-0">
									@if (AppSettings.ProductView.SortByList != null)
										@foreach (SortListBase sortList in AppSettings.ProductView.SortByList)
										{
											<li><a href="?sortBy=@sortList.Column&order=@sortList.Order" class="text_14">@_phrase["Product", sortList.Phrase]</a></li>
										}
								</ul>
							</div>
							<div class="filter-drawer-trigger mobile-filter d-flex align-items-center d-lg-none">
								<a href="#" onclick="event.preventDefault();">
									<span class="mobile-filter-icon me-2">
										<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"
											 viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
											 stroke-linecap="round" stroke-linejoin="round" class="icon icon-filter">
											<polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3"></polygon>
										</svg>
									</span>
									<span class="mobile-filter-heading">Filter and Sorting</span>
								</a>
							</div>
						</div>
					</div>
					<div class="collection-product-container">
						<div class="row">
							@foreach(Product product in Model.Products)
							{
								<partial name="_ProductCard" for="@product" render-mode="ServerPrerendered" />
							}
						</div>
					</div>
					<!-- pagination -->
					<nav aria-label="Page navigation">
						<ul class="pagination justify-content-center mt-100">
							@if (Model.PreviousPage != 0)
							{
								var queryList = new
								{
									sortBy,
									order,
									priceFrom,
									priceTo,
									page = Model.PreviousPage,
								};
								<li class="page-item">
									<a class="page-link" href="@Url.Action(null, null, queryList)">Previous</a>
								</li>
							}
							else
							{
								<li class="page-item disabled">
									<a class="page-link">Previous</a>
								</li>
							}
							@{
								int startPageShown = Math.Max(1, Model.CurrentPage - 5);
								int endPageShown = Math.Min(Model.TotalPages, Model.CurrentPage + 5);
							}
							@for (var i = startPageShown; i <= endPageShown; i++)
							{
									@if (Model.CurrentPage == i)
									{
										<li class="page-item active" aria-current="page">
											<span class="page-link ">
												@i
											</span>
										</li>
									}
									else
									{
									var queryList = new
									{
										sortBy,
										order,
										priceFrom,
										priceTo,
										page = i,
									};
										<li class="page-item">
										<a class="page-link" href="@Url.Action(null, null, queryList)">
												@i
											</a>
										</li>
									}
							}
							@if (Model.NextPage != 0)
							{
								var queryList = new
								{
									sortBy,
									order,
									priceFrom,
									priceTo,
									page = Model.NextPage,
								};
								<li class="page-item">
									<a class="page-link" href="@Url.Action(null, null, queryList)">Next</a>
								</li>
							}
							else
							{
								<li class="page-item disabled">
									<a class="page-link">Next</a>
								</li>
							}
						</ul>
					</nav>

				</div>
				<!-- product area end -->
				<!-- sidebar start -->
				<div class="col-lg-3 col-md-12 col-12">
					<div class="collection-filter filter-drawer">
						<div class="filter-widget d-lg-none d-flex align-items-center justify-content-between">
							<h4 class="heading_24">
								Filter By</h4>
								<button type="button" class="btn-close text-reset filter-drawer-trigger d-lg-none"></button>
						</div>

						<div class="filter-widget d-lg-none">
							<div class="filter-header faq-heading heading_18 d-flex align-items-center justify-content-between border-bottom"
								 data-bs-toggle="collapse" data-bs-target="#filter-mobile-sort">
								<span>
									<span class="sorting-title me-2">Sort by:</span>
									<span class="active-sorting">Featured</span>
								</span>
								<span class="faq-heading-icon">
									<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"
										 viewBox="0 0 24 24" fill="none" stroke="#000" stroke-width="2"
										 stroke-linecap="round" stroke-linejoin="round" class="icon icon-down">
										<polyline points="6 9 12 15 18 9"></polyline>
									</svg>
								</span>
							</div>
							<div id="filter-mobile-sort" class="accordion-collapse collapse show">
								<ul class="sorting-lists-mobile list-unstyled m-0">
								@if (AppSettings.ProductView.SortByList != null)
									@foreach (SortListBase sortList in AppSettings.ProductView.SortByList)
										{
											var sortingQueryList = new
											{
												sortBy = sortList.Column,
												order = sortList.Order,
												priceFrom,
												priceTo,
												categoryList = (categories != null && categories.Length > 0 ? string.Join(',', categories) : ViewBag.CategoryId)
											};
											<li>
												<a href="@Url.Action(null, null, sortingQueryList)" class="text_14">
													@_phrase["Product", sortList.Phrase]
													</a>
											</li>
										}
								</ul>
							</div>
						</div>
						<div class="filter-widget">
							<div class="filter-header faq-heading heading_18 d-flex align-items-center justify-content-between border-bottom"
								 data-bs-toggle="collapse" data-bs-target="#filter-collection">
								Categories
								<span class="faq-heading-icon">
									<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"
										 viewBox="0 0 24 24" fill="none" stroke="#000" stroke-width="2"
										 stroke-linecap="round" stroke-linejoin="round" class="icon icon-down">
										<polyline points="6 9 12 15 18 9"></polyline>
									</svg>
								</span>
							</div>
							<div id="filter-collection" class="accordion-collapse collapse show">
								<ul class="filter-lists list-unstyled mb-0">
									@if (CommonHelpers.Categories != null)
										@foreach (Category category in CommonHelpers.Categories)
										{
											<li class="filter-item">
												<label class="filter-label">
													@if (ViewBag.CategoryName == null)
													{
														<input type="checkbox" name="categories" data-category-id="@category.Id" class="form-check" @((ViewBag.CategoryId != null && category.Id == ViewBag.CategoryId) || (categories != null && categories.Contains(category.Id)) ? "checked" : "") />
														@:&nbsp;
														<span class="filter-checkbox rounded me-2"></span>
													}
													<span class="filter-text" data-category-id="@category.Id">
														@if (ViewBag.CategoryName != null)
														{
															<a href="@Url.Action("View", "Category", new { id = category.Id })">
																@category.Name
															</a>
														} else
														{
															@category.Name
														}
													</span>
												</label>
											</li>
										}
								</ul>
							</div>
						</div>
						<div class="filter-widget">
							<div class="filter-header faq-heading heading_18 d-flex align-items-center justify-content-between border-bottom"
								 data-bs-toggle="collapse" data-bs-target="#filter-price">
								Price
								<span class="faq-heading-icon">
									<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"
										 viewBox="0 0 24 24" fill="none" stroke="#000" stroke-width="2"
										 stroke-linecap="round" stroke-linejoin="round" class="icon icon-down">
										<polyline points="6 9 12 15 18 9"></polyline>
									</svg>
								</span>
							</div>
							<div id="filter-price" class="accordion-collapse collapse show">
								<div class="filter-price d-flex align-items-center justify-content-between">
									<div class="filter-field">
										<input class="form-control" id="priceFrom" name="priceFrom" type="number" placeholder="$0" min="0"
											   max="50000.00" value="@ViewBag.priceFrom" />
									</div>
									<div class="filter-separator px-3">To</div>
									<div class="filter-field">
										<input class="form-control" id="priceTo" name="priceTo" type="number" min="0" placeholder="$595.00"
											   max="50000.00" value="@ViewBag.priceTo" />
									</div>
								</div>
							</div>
						</div>
						<div class="d-flex justify-content-center" id="filter-button">
							<button class="btn btn-primary">
								Filter
							</button>
						</div>
					</div>
				</div>
				<!-- sidebar end -->
			</div>
		</div>
	</div>
</main>
@{
	var FilterQueryList = new
	{
		sortBy,
		order,
		page = Model.CurrentPage,
	};
}

@section Scripts
{
	<script type="text/javascript">
		document.querySelector("#filter-button").addEventListener('click', (e) => {
			let priceTo = document.querySelector("#priceTo").value;//[input name='priceTo']
			let priceFrom = document.querySelector("#priceFrom").value;
			let categories = [];
			let catList = document.querySelectorAll('input[name=categories]:checked').forEach((e) => {
				categories.push(e.getAttribute('data-category-id'));
			});
			let querystring = '';
			let url = `@Url.Action(null, null, FilterQueryList)`.replace(/&amp;/g, '&');

			window.location.href = decodeURI(url) +
				`&priceTo=${priceTo}&priceFrom=${priceFrom}` +
				`&categoryList=${categories.join(',')}`;
		});
	</script>
}